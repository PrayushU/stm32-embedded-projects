
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800132c  0800132c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800132c  0800132c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800132c  0800132c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800132c  0800132c  0001132c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001330  08001330  00011330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000074  080013a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080013a8  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d6a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c6  00000000  00000000  00020e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000212d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  000214a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d14  00000000  00000000  00021630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a69  00000000  00000000  00024344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009813  00000000  00000000  00025dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002f5c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c98  00000000  00000000  0002f610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800126c 	.word	0x0800126c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	0800126c 	.word	0x0800126c

08000204 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e002      	b.n	8000218 <delay+0x14>
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	429a      	cmp	r2, r3
 800021e:	d3f8      	bcc.n	8000212 <delay+0xe>
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
	...

08000230 <led_init_all>:

void led_init_all(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <led_init_all+0x6c>)
 8000238:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800023a:	4b19      	ldr	r3, [pc, #100]	; (80002a0 <led_init_all+0x70>)
 800023c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 0208 	orr.w	r2, r3, #8
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800027a:	200c      	movs	r0, #12
 800027c:	f000 f82a 	bl	80002d4 <led_off>
    led_off(LED_ORANGE);
 8000280:	200d      	movs	r0, #13
 8000282:	f000 f827 	bl	80002d4 <led_off>
    led_off(LED_RED);
 8000286:	200e      	movs	r0, #14
 8000288:	f000 f824 	bl	80002d4 <led_off>
    led_off(LED_BLUE);
 800028c:	200f      	movs	r0, #15
 800028e:	f000 f821 	bl	80002d4 <led_off>



}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40023830 	.word	0x40023830
 80002a0:	40020c00 	.word	0x40020c00

080002a4 <led_on>:

void led_on(uint8_t led_no)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <led_on+0x2c>)
 80002b0:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	79fa      	ldrb	r2, [r7, #7]
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	431a      	orrs	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	601a      	str	r2, [r3, #0]

}
 80002c4:	bf00      	nop
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40020c14 	.word	0x40020c14

080002d4 <led_off>:

void led_off(uint8_t led_no)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <led_off+0x30>)
 80002e0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	2101      	movs	r1, #1
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	43d2      	mvns	r2, r2
 80002f0:	401a      	ands	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	601a      	str	r2, [r3, #0]

}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40020c14 	.word	0x40020c14

08000308 <main>:
uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0; // task is running

int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	enable_processor_faults();
 800030c:	f000 f8f2 	bl	80004f4 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <main+0x40>)
 8000312:	f000 f8a3 	bl	800045c <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 8000316:	4a0d      	ldr	r2, [pc, #52]	; (800034c <main+0x44>)
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <main+0x48>)
 800031a:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <main+0x4c>)
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <main+0x48>)
 8000320:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 8000322:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <main+0x50>)
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <main+0x48>)
 8000326:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000328:	4a0c      	ldr	r2, [pc, #48]	; (800035c <main+0x54>)
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <main+0x48>)
 800032c:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 800032e:	f000 f899 	bl	8000464 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000336:	f000 f85b 	bl	80003f0 <init_systick_timer>

	led_init_all();
 800033a:	f7ff ff79 	bl	8000230 <led_init_all>

	switch_sp_to_psp();
 800033e:	f000 f937 	bl	80005b0 <switch_sp_to_psp>

	task1_handler();
 8000342:	f000 f80d 	bl	8000360 <task1_handler>

	for(;;);
 8000346:	e7fe      	b.n	8000346 <main+0x3e>
 8000348:	2001f000 	.word	0x2001f000
 800034c:	08000361 	.word	0x08000361
 8000350:	20000090 	.word	0x20000090
 8000354:	08000385 	.word	0x08000385
 8000358:	080003a9 	.word	0x080003a9
 800035c:	080003cd 	.word	0x080003cd

08000360 <task1_handler>:
}

void task1_handler(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 8000364:	200c      	movs	r0, #12
 8000366:	f7ff ff9d 	bl	80002a4 <led_on>
		delay(DELAY_COUNT_1S);
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <task1_handler+0x20>)
 800036c:	f7ff ff4a 	bl	8000204 <delay>
		led_off(LED_GREEN);
 8000370:	200c      	movs	r0, #12
 8000372:	f7ff ffaf 	bl	80002d4 <led_off>
		delay(DELAY_COUNT_1S);
 8000376:	4802      	ldr	r0, [pc, #8]	; (8000380 <task1_handler+0x20>)
 8000378:	f7ff ff44 	bl	8000204 <delay>
		led_on(LED_GREEN);
 800037c:	e7f2      	b.n	8000364 <task1_handler+0x4>
 800037e:	bf00      	nop
 8000380:	001312d0 	.word	0x001312d0

08000384 <task2_handler>:
	}
}

void task2_handler(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_ORANGE);
 8000388:	200d      	movs	r0, #13
 800038a:	f7ff ff8b 	bl	80002a4 <led_on>
		delay(DELAY_COUNT_500MS);
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <task2_handler+0x20>)
 8000390:	f7ff ff38 	bl	8000204 <delay>
		led_off(LED_ORANGE);
 8000394:	200d      	movs	r0, #13
 8000396:	f7ff ff9d 	bl	80002d4 <led_off>
		delay(DELAY_COUNT_500MS);
 800039a:	4802      	ldr	r0, [pc, #8]	; (80003a4 <task2_handler+0x20>)
 800039c:	f7ff ff32 	bl	8000204 <delay>
		led_on(LED_ORANGE);
 80003a0:	e7f2      	b.n	8000388 <task2_handler+0x4>
 80003a2:	bf00      	nop
 80003a4:	00098968 	.word	0x00098968

080003a8 <task3_handler>:
	}
}

void task3_handler(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 80003ac:	200f      	movs	r0, #15
 80003ae:	f7ff ff79 	bl	80002a4 <led_on>
		delay(DELAY_COUNT_250MS);
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <task3_handler+0x20>)
 80003b4:	f7ff ff26 	bl	8000204 <delay>
		led_off(LED_BLUE);
 80003b8:	200f      	movs	r0, #15
 80003ba:	f7ff ff8b 	bl	80002d4 <led_off>
		delay(DELAY_COUNT_250MS);
 80003be:	4802      	ldr	r0, [pc, #8]	; (80003c8 <task3_handler+0x20>)
 80003c0:	f7ff ff20 	bl	8000204 <delay>
		led_on(LED_BLUE);
 80003c4:	e7f2      	b.n	80003ac <task3_handler+0x4>
 80003c6:	bf00      	nop
 80003c8:	0004c4b4 	.word	0x0004c4b4

080003cc <task4_handler>:
	}
}

void task4_handler(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 80003d0:	200e      	movs	r0, #14
 80003d2:	f7ff ff67 	bl	80002a4 <led_on>
		delay(DELAY_COUNT_125MS);
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <task4_handler+0x20>)
 80003d8:	f7ff ff14 	bl	8000204 <delay>
		led_off(LED_RED);
 80003dc:	200e      	movs	r0, #14
 80003de:	f7ff ff79 	bl	80002d4 <led_off>
		delay(DELAY_COUNT_125MS);
 80003e2:	4802      	ldr	r0, [pc, #8]	; (80003ec <task4_handler+0x20>)
 80003e4:	f7ff ff0e 	bl	8000204 <delay>
		led_on(LED_RED);
 80003e8:	e7f2      	b.n	80003d0 <task4_handler+0x4>
 80003ea:	bf00      	nop
 80003ec:	0002625a 	.word	0x0002625a

080003f0 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 80003f0:	b480      	push	{r7}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <init_systick_timer+0x60>)
 80003fa:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <init_systick_timer+0x64>)
 80003fe:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000400:	4a15      	ldr	r2, [pc, #84]	; (8000458 <init_systick_timer+0x68>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	fbb2 f3f3 	udiv	r3, r2, r3
 8000408:	3b01      	subs	r3, #1
 800040a:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]

	//Reload the value in to SVR
	*pSRVR |= count_value;
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	431a      	orrs	r2, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	601a      	str	r2, [r3, #0]

	//do some settings
	*pSCSR |= (1 << 1); //Enables sysTick TickInt
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f043 0202 	orr.w	r2, r3, #2
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Indicates clock source is processor clock
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f043 0204 	orr.w	r2, r3, #4
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	601a      	str	r2, [r3, #0]

	//enable the sysTick
	*pSCSR |= (1 << 0); //Enables the counter
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f043 0201 	orr.w	r2, r3, #1
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	601a      	str	r2, [r3, #0]
}
 8000442:	bf00      	nop
 8000444:	371c      	adds	r7, #28
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000e014 	.word	0xe000e014
 8000454:	e000e010 	.word	0xe000e010
 8000458:	00f42400 	.word	0x00f42400

0800045c <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){

	__asm volatile("MSR MSP,R0"); //r0 as the default register used for argument are r0
 800045c:	f380 8808 	msr	MSP, r0
	__asm volatile("BX LR");
 8000460:	4770      	bx	lr
}
 8000462:	bf00      	nop

08000464 <init_tasks_stack>:



void init_tasks_stack(void){
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0

	uint32_t *pPSP;
	for(int i = 0; i < MAX_TASKS ; i++){
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	e032      	b.n	80004d6 <init_tasks_stack+0x72>
		pPSP = (uint32_t*)psp_of_tasks[i];
 8000470:	4a1e      	ldr	r2, [pc, #120]	; (80004ec <init_tasks_stack+0x88>)
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000478:	60fb      	str	r3, [r7, #12]
		pPSP--;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	3b04      	subs	r3, #4
 800047e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x00100000
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000486:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	3b04      	subs	r3, #4
 800048c:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800048e:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <init_tasks_stack+0x8c>)
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3b04      	subs	r3, #4
 800049e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f06f 0202 	mvn.w	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]

		for(int j =0; j<13; j++){
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	e008      	b.n	80004c0 <init_tasks_stack+0x5c>
			pPSP--;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3b04      	subs	r3, #4
 80004b2:	60fb      	str	r3, [r7, #12]
			*pPSP=0;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
		for(int j =0; j<13; j++){
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3301      	adds	r3, #1
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b0c      	cmp	r3, #12
 80004c4:	ddf3      	ble.n	80004ae <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (int32_t)pPSP;
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	4908      	ldr	r1, [pc, #32]	; (80004ec <init_tasks_stack+0x88>)
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS ; i++){
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	ddc9      	ble.n	8000470 <init_tasks_stack+0xc>

	}

}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000090 	.word	0x20000090

080004f4 <enable_processor_faults>:

void enable_processor_faults(void){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <enable_processor_faults+0x3c>)
 80004fc:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);//mem manage
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // bus fault
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //usage fault
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	601a      	str	r2, [r3, #0]



}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed24 	.word	0xe000ed24

08000534 <get_psp_value>:

uint32_t get_psp_value(void){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

	return psp_of_tasks[current_task];
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <get_psp_value+0x1c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <get_psp_value+0x20>)
 8000540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000a0 	.word	0x200000a0
 8000554:	20000000 	.word	0x20000000

08000558 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <save_psp_value+0x24>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <save_psp_value+0x28>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200000a0 	.word	0x200000a0
 8000580:	20000000 	.word	0x20000000

08000584 <update_next_task>:

void update_next_task(void){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	current_task++;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <update_next_task+0x28>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <update_next_task+0x28>)
 8000592:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <update_next_task+0x28>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f003 0303 	and.w	r3, r3, #3
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <update_next_task+0x28>)
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	200000a0 	.word	0x200000a0

080005b0 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void){

	//1. intialise the PSP with Task1 stack start address
	//get the value of psp of current task

	__asm volatile ("PUSH {LR}");			//preserve LR which connect back to main
 80005b0:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 80005b2:	f7ff ffbf 	bl	8000534 <get_psp_value>
	__asm volatile ("MSR PSP,R0");			//Initialize psp
 80005b6:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");			//pop back LR value
 80005ba:	f85d eb04 	ldr.w	lr, [sp], #4

	//Change MSP to PSP as stack pointer in control register
	__asm volatile ("MOV R0,#0x02");
 80005be:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80005c2:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80005c6:	4770      	bx	lr



}
 80005c8:	bf00      	nop

080005ca <SysTick_Handler>:

	/*Save the context of current task */


	//1 Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 80005ca:	f3ef 8009 	mrs	r0, PSP
	//2 Using that PSP value store stack frame 2(SF2)(R3 to R11)
		/*cannot use push value as, this is a handler function which uses the MSP SP
		 * pushing value would manipulate the MSP stack pointer but we are trying to
		 * push into PSP SP stack
		 */
	__asm volatile("STMDB R0!,{R4-R11}");
 80005ce:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
				//The "!" after R0 means that, that operand will be changed and updated after operation


	__asm volatile("PUSH {LR}");
 80005d2:	b500      	push	{lr}


	//3 Save the current value of PSP
	__asm volatile("BL save_psp_value");
 80005d4:	f7ff ffc0 	bl	8000558 <save_psp_value>

	/* Retrieve context of next task */

	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 80005d8:	f7ff ffd4 	bl	8000584 <update_next_task>

	//2. Gets its past psp value
	__asm volatile ("BL get_psp_value"); //the return value of func is register R0
 80005dc:	f7ff ffaa 	bl	8000534 <get_psp_value>

	//3. Using that PSP value retrieve SF2
	__asm volatile("LDMIA R0!,{R4-R11}");
 80005e0:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 80005e4:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 80005e8:	f85d eb04 	ldr.w	lr, [sp], #4


	__asm volatile("BX LR"); //Needed cause it is a naked function
 80005ec:	4770      	bx	lr


}
 80005ee:	bf00      	nop

080005f0 <HardFault_Handler>:


void HardFault_Handler(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 80005f4:	4801      	ldr	r0, [pc, #4]	; (80005fc <HardFault_Handler+0xc>)
 80005f6:	f000 f9a9 	bl	800094c <puts>
	while(1);
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0xa>
 80005fc:	08001284 	.word	0x08001284

08000600 <MemManage_Handler>:
}

void MemManage_Handler(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	printf("Exception: MemManagae\n");
 8000604:	4801      	ldr	r0, [pc, #4]	; (800060c <MemManage_Handler+0xc>)
 8000606:	f000 f9a1 	bl	800094c <puts>
	while(1);
 800060a:	e7fe      	b.n	800060a <MemManage_Handler+0xa>
 800060c:	0800129c 	.word	0x0800129c

08000610 <BusFault_Handler>:
}

void BusFault_Handler(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 8000614:	4801      	ldr	r0, [pc, #4]	; (800061c <BusFault_Handler+0xc>)
 8000616:	f000 f999 	bl	800094c <puts>
	while(1);
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0xa>
 800061c:	080012b4 	.word	0x080012b4

08000620 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <ITM_SendChar+0x48>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <ITM_SendChar+0x48>)
 8000630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000634:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <ITM_SendChar+0x4c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <ITM_SendChar+0x4c>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000642:	bf00      	nop
 8000644:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f8      	beq.n	8000644 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000652:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	6013      	str	r3, [r2, #0]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000edfc 	.word	0xe000edfc
 800066c:	e0000e00 	.word	0xe0000e00

08000670 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e00a      	b.n	8000698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000682:	f3af 8000 	nop.w
 8000686:	4601      	mov	r1, r0
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	60ba      	str	r2, [r7, #8]
 800068e:	b2ca      	uxtb	r2, r1
 8000690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	dbf0      	blt.n	8000682 <_read+0x12>
	}

return len;
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e009      	b.n	80006d0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffab 	bl	8000620 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbf1      	blt.n	80006bc <_write+0x12>
	}
	return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <_close>:

int _close(int file)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	return -1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800070a:	605a      	str	r2, [r3, #4]
	return 0;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <_isatty>:

int _isatty(int file)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
	return 1;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f000 f846 	bl	800080c <__errno>
 8000780:	4603      	mov	r3, r0
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20020000 	.word	0x20020000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	200000a4 	.word	0x200000a4
 80007b4:	200000b8 	.word	0x200000b8

080007b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	; (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007e6:	f000 f817 	bl	8000818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ea:	f7ff fd8d 	bl	8000308 <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   r0, =_estack
 80007f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007fc:	08001334 	.word	0x08001334
  ldr r2, =_sbss
 8000800:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000804:	200000b8 	.word	0x200000b8

08000808 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC_IRQHandler>
	...

0800080c <__errno>:
 800080c:	4b01      	ldr	r3, [pc, #4]	; (8000814 <__errno+0x8>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000010 	.word	0x20000010

08000818 <__libc_init_array>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4d0d      	ldr	r5, [pc, #52]	; (8000850 <__libc_init_array+0x38>)
 800081c:	4c0d      	ldr	r4, [pc, #52]	; (8000854 <__libc_init_array+0x3c>)
 800081e:	1b64      	subs	r4, r4, r5
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	2600      	movs	r6, #0
 8000824:	42a6      	cmp	r6, r4
 8000826:	d109      	bne.n	800083c <__libc_init_array+0x24>
 8000828:	4d0b      	ldr	r5, [pc, #44]	; (8000858 <__libc_init_array+0x40>)
 800082a:	4c0c      	ldr	r4, [pc, #48]	; (800085c <__libc_init_array+0x44>)
 800082c:	f000 fd1e 	bl	800126c <_init>
 8000830:	1b64      	subs	r4, r4, r5
 8000832:	10a4      	asrs	r4, r4, #2
 8000834:	2600      	movs	r6, #0
 8000836:	42a6      	cmp	r6, r4
 8000838:	d105      	bne.n	8000846 <__libc_init_array+0x2e>
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000840:	4798      	blx	r3
 8000842:	3601      	adds	r6, #1
 8000844:	e7ee      	b.n	8000824 <__libc_init_array+0xc>
 8000846:	f855 3b04 	ldr.w	r3, [r5], #4
 800084a:	4798      	blx	r3
 800084c:	3601      	adds	r6, #1
 800084e:	e7f2      	b.n	8000836 <__libc_init_array+0x1e>
 8000850:	0800132c 	.word	0x0800132c
 8000854:	0800132c 	.word	0x0800132c
 8000858:	0800132c 	.word	0x0800132c
 800085c:	08001330 	.word	0x08001330

08000860 <memset>:
 8000860:	4402      	add	r2, r0
 8000862:	4603      	mov	r3, r0
 8000864:	4293      	cmp	r3, r2
 8000866:	d100      	bne.n	800086a <memset+0xa>
 8000868:	4770      	bx	lr
 800086a:	f803 1b01 	strb.w	r1, [r3], #1
 800086e:	e7f9      	b.n	8000864 <memset+0x4>

08000870 <_puts_r>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	460e      	mov	r6, r1
 8000874:	4605      	mov	r5, r0
 8000876:	b118      	cbz	r0, 8000880 <_puts_r+0x10>
 8000878:	6983      	ldr	r3, [r0, #24]
 800087a:	b90b      	cbnz	r3, 8000880 <_puts_r+0x10>
 800087c:	f000 fa48 	bl	8000d10 <__sinit>
 8000880:	69ab      	ldr	r3, [r5, #24]
 8000882:	68ac      	ldr	r4, [r5, #8]
 8000884:	b913      	cbnz	r3, 800088c <_puts_r+0x1c>
 8000886:	4628      	mov	r0, r5
 8000888:	f000 fa42 	bl	8000d10 <__sinit>
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <_puts_r+0xd0>)
 800088e:	429c      	cmp	r4, r3
 8000890:	d120      	bne.n	80008d4 <_puts_r+0x64>
 8000892:	686c      	ldr	r4, [r5, #4]
 8000894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000896:	07db      	lsls	r3, r3, #31
 8000898:	d405      	bmi.n	80008a6 <_puts_r+0x36>
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	0598      	lsls	r0, r3, #22
 800089e:	d402      	bmi.n	80008a6 <_puts_r+0x36>
 80008a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008a2:	f000 fad3 	bl	8000e4c <__retarget_lock_acquire_recursive>
 80008a6:	89a3      	ldrh	r3, [r4, #12]
 80008a8:	0719      	lsls	r1, r3, #28
 80008aa:	d51d      	bpl.n	80008e8 <_puts_r+0x78>
 80008ac:	6923      	ldr	r3, [r4, #16]
 80008ae:	b1db      	cbz	r3, 80008e8 <_puts_r+0x78>
 80008b0:	3e01      	subs	r6, #1
 80008b2:	68a3      	ldr	r3, [r4, #8]
 80008b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008b8:	3b01      	subs	r3, #1
 80008ba:	60a3      	str	r3, [r4, #8]
 80008bc:	bb39      	cbnz	r1, 800090e <_puts_r+0x9e>
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da38      	bge.n	8000934 <_puts_r+0xc4>
 80008c2:	4622      	mov	r2, r4
 80008c4:	210a      	movs	r1, #10
 80008c6:	4628      	mov	r0, r5
 80008c8:	f000 f848 	bl	800095c <__swbuf_r>
 80008cc:	3001      	adds	r0, #1
 80008ce:	d011      	beq.n	80008f4 <_puts_r+0x84>
 80008d0:	250a      	movs	r5, #10
 80008d2:	e011      	b.n	80008f8 <_puts_r+0x88>
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <_puts_r+0xd4>)
 80008d6:	429c      	cmp	r4, r3
 80008d8:	d101      	bne.n	80008de <_puts_r+0x6e>
 80008da:	68ac      	ldr	r4, [r5, #8]
 80008dc:	e7da      	b.n	8000894 <_puts_r+0x24>
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <_puts_r+0xd8>)
 80008e0:	429c      	cmp	r4, r3
 80008e2:	bf08      	it	eq
 80008e4:	68ec      	ldreq	r4, [r5, #12]
 80008e6:	e7d5      	b.n	8000894 <_puts_r+0x24>
 80008e8:	4621      	mov	r1, r4
 80008ea:	4628      	mov	r0, r5
 80008ec:	f000 f888 	bl	8000a00 <__swsetup_r>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d0dd      	beq.n	80008b0 <_puts_r+0x40>
 80008f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80008f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008fa:	07da      	lsls	r2, r3, #31
 80008fc:	d405      	bmi.n	800090a <_puts_r+0x9a>
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	059b      	lsls	r3, r3, #22
 8000902:	d402      	bmi.n	800090a <_puts_r+0x9a>
 8000904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000906:	f000 faa2 	bl	8000e4e <__retarget_lock_release_recursive>
 800090a:	4628      	mov	r0, r5
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	2b00      	cmp	r3, #0
 8000910:	da04      	bge.n	800091c <_puts_r+0xac>
 8000912:	69a2      	ldr	r2, [r4, #24]
 8000914:	429a      	cmp	r2, r3
 8000916:	dc06      	bgt.n	8000926 <_puts_r+0xb6>
 8000918:	290a      	cmp	r1, #10
 800091a:	d004      	beq.n	8000926 <_puts_r+0xb6>
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	6022      	str	r2, [r4, #0]
 8000922:	7019      	strb	r1, [r3, #0]
 8000924:	e7c5      	b.n	80008b2 <_puts_r+0x42>
 8000926:	4622      	mov	r2, r4
 8000928:	4628      	mov	r0, r5
 800092a:	f000 f817 	bl	800095c <__swbuf_r>
 800092e:	3001      	adds	r0, #1
 8000930:	d1bf      	bne.n	80008b2 <_puts_r+0x42>
 8000932:	e7df      	b.n	80008f4 <_puts_r+0x84>
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	250a      	movs	r5, #10
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	6022      	str	r2, [r4, #0]
 800093c:	701d      	strb	r5, [r3, #0]
 800093e:	e7db      	b.n	80008f8 <_puts_r+0x88>
 8000940:	080012ec 	.word	0x080012ec
 8000944:	0800130c 	.word	0x0800130c
 8000948:	080012cc 	.word	0x080012cc

0800094c <puts>:
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <puts+0xc>)
 800094e:	4601      	mov	r1, r0
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	f7ff bf8d 	b.w	8000870 <_puts_r>
 8000956:	bf00      	nop
 8000958:	20000010 	.word	0x20000010

0800095c <__swbuf_r>:
 800095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095e:	460e      	mov	r6, r1
 8000960:	4614      	mov	r4, r2
 8000962:	4605      	mov	r5, r0
 8000964:	b118      	cbz	r0, 800096e <__swbuf_r+0x12>
 8000966:	6983      	ldr	r3, [r0, #24]
 8000968:	b90b      	cbnz	r3, 800096e <__swbuf_r+0x12>
 800096a:	f000 f9d1 	bl	8000d10 <__sinit>
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <__swbuf_r+0x98>)
 8000970:	429c      	cmp	r4, r3
 8000972:	d12b      	bne.n	80009cc <__swbuf_r+0x70>
 8000974:	686c      	ldr	r4, [r5, #4]
 8000976:	69a3      	ldr	r3, [r4, #24]
 8000978:	60a3      	str	r3, [r4, #8]
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	071a      	lsls	r2, r3, #28
 800097e:	d52f      	bpl.n	80009e0 <__swbuf_r+0x84>
 8000980:	6923      	ldr	r3, [r4, #16]
 8000982:	b36b      	cbz	r3, 80009e0 <__swbuf_r+0x84>
 8000984:	6923      	ldr	r3, [r4, #16]
 8000986:	6820      	ldr	r0, [r4, #0]
 8000988:	1ac0      	subs	r0, r0, r3
 800098a:	6963      	ldr	r3, [r4, #20]
 800098c:	b2f6      	uxtb	r6, r6
 800098e:	4283      	cmp	r3, r0
 8000990:	4637      	mov	r7, r6
 8000992:	dc04      	bgt.n	800099e <__swbuf_r+0x42>
 8000994:	4621      	mov	r1, r4
 8000996:	4628      	mov	r0, r5
 8000998:	f000 f926 	bl	8000be8 <_fflush_r>
 800099c:	bb30      	cbnz	r0, 80009ec <__swbuf_r+0x90>
 800099e:	68a3      	ldr	r3, [r4, #8]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	60a3      	str	r3, [r4, #8]
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	6022      	str	r2, [r4, #0]
 80009aa:	701e      	strb	r6, [r3, #0]
 80009ac:	6963      	ldr	r3, [r4, #20]
 80009ae:	3001      	adds	r0, #1
 80009b0:	4283      	cmp	r3, r0
 80009b2:	d004      	beq.n	80009be <__swbuf_r+0x62>
 80009b4:	89a3      	ldrh	r3, [r4, #12]
 80009b6:	07db      	lsls	r3, r3, #31
 80009b8:	d506      	bpl.n	80009c8 <__swbuf_r+0x6c>
 80009ba:	2e0a      	cmp	r6, #10
 80009bc:	d104      	bne.n	80009c8 <__swbuf_r+0x6c>
 80009be:	4621      	mov	r1, r4
 80009c0:	4628      	mov	r0, r5
 80009c2:	f000 f911 	bl	8000be8 <_fflush_r>
 80009c6:	b988      	cbnz	r0, 80009ec <__swbuf_r+0x90>
 80009c8:	4638      	mov	r0, r7
 80009ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <__swbuf_r+0x9c>)
 80009ce:	429c      	cmp	r4, r3
 80009d0:	d101      	bne.n	80009d6 <__swbuf_r+0x7a>
 80009d2:	68ac      	ldr	r4, [r5, #8]
 80009d4:	e7cf      	b.n	8000976 <__swbuf_r+0x1a>
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <__swbuf_r+0xa0>)
 80009d8:	429c      	cmp	r4, r3
 80009da:	bf08      	it	eq
 80009dc:	68ec      	ldreq	r4, [r5, #12]
 80009de:	e7ca      	b.n	8000976 <__swbuf_r+0x1a>
 80009e0:	4621      	mov	r1, r4
 80009e2:	4628      	mov	r0, r5
 80009e4:	f000 f80c 	bl	8000a00 <__swsetup_r>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d0cb      	beq.n	8000984 <__swbuf_r+0x28>
 80009ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80009f0:	e7ea      	b.n	80009c8 <__swbuf_r+0x6c>
 80009f2:	bf00      	nop
 80009f4:	080012ec 	.word	0x080012ec
 80009f8:	0800130c 	.word	0x0800130c
 80009fc:	080012cc 	.word	0x080012cc

08000a00 <__swsetup_r>:
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <__swsetup_r+0xcc>)
 8000a02:	b570      	push	{r4, r5, r6, lr}
 8000a04:	681d      	ldr	r5, [r3, #0]
 8000a06:	4606      	mov	r6, r0
 8000a08:	460c      	mov	r4, r1
 8000a0a:	b125      	cbz	r5, 8000a16 <__swsetup_r+0x16>
 8000a0c:	69ab      	ldr	r3, [r5, #24]
 8000a0e:	b913      	cbnz	r3, 8000a16 <__swsetup_r+0x16>
 8000a10:	4628      	mov	r0, r5
 8000a12:	f000 f97d 	bl	8000d10 <__sinit>
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <__swsetup_r+0xd0>)
 8000a18:	429c      	cmp	r4, r3
 8000a1a:	d10f      	bne.n	8000a3c <__swsetup_r+0x3c>
 8000a1c:	686c      	ldr	r4, [r5, #4]
 8000a1e:	89a3      	ldrh	r3, [r4, #12]
 8000a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a24:	0719      	lsls	r1, r3, #28
 8000a26:	d42c      	bmi.n	8000a82 <__swsetup_r+0x82>
 8000a28:	06dd      	lsls	r5, r3, #27
 8000a2a:	d411      	bmi.n	8000a50 <__swsetup_r+0x50>
 8000a2c:	2309      	movs	r3, #9
 8000a2e:	6033      	str	r3, [r6, #0]
 8000a30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a34:	81a3      	strh	r3, [r4, #12]
 8000a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a3a:	e03e      	b.n	8000aba <__swsetup_r+0xba>
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <__swsetup_r+0xd4>)
 8000a3e:	429c      	cmp	r4, r3
 8000a40:	d101      	bne.n	8000a46 <__swsetup_r+0x46>
 8000a42:	68ac      	ldr	r4, [r5, #8]
 8000a44:	e7eb      	b.n	8000a1e <__swsetup_r+0x1e>
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <__swsetup_r+0xd8>)
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	bf08      	it	eq
 8000a4c:	68ec      	ldreq	r4, [r5, #12]
 8000a4e:	e7e6      	b.n	8000a1e <__swsetup_r+0x1e>
 8000a50:	0758      	lsls	r0, r3, #29
 8000a52:	d512      	bpl.n	8000a7a <__swsetup_r+0x7a>
 8000a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a56:	b141      	cbz	r1, 8000a6a <__swsetup_r+0x6a>
 8000a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d002      	beq.n	8000a66 <__swsetup_r+0x66>
 8000a60:	4630      	mov	r0, r6
 8000a62:	f000 fa5b 	bl	8000f1c <_free_r>
 8000a66:	2300      	movs	r3, #0
 8000a68:	6363      	str	r3, [r4, #52]	; 0x34
 8000a6a:	89a3      	ldrh	r3, [r4, #12]
 8000a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a70:	81a3      	strh	r3, [r4, #12]
 8000a72:	2300      	movs	r3, #0
 8000a74:	6063      	str	r3, [r4, #4]
 8000a76:	6923      	ldr	r3, [r4, #16]
 8000a78:	6023      	str	r3, [r4, #0]
 8000a7a:	89a3      	ldrh	r3, [r4, #12]
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	81a3      	strh	r3, [r4, #12]
 8000a82:	6923      	ldr	r3, [r4, #16]
 8000a84:	b94b      	cbnz	r3, 8000a9a <__swsetup_r+0x9a>
 8000a86:	89a3      	ldrh	r3, [r4, #12]
 8000a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a90:	d003      	beq.n	8000a9a <__swsetup_r+0x9a>
 8000a92:	4621      	mov	r1, r4
 8000a94:	4630      	mov	r0, r6
 8000a96:	f000 fa01 	bl	8000e9c <__smakebuf_r>
 8000a9a:	89a0      	ldrh	r0, [r4, #12]
 8000a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000aa0:	f010 0301 	ands.w	r3, r0, #1
 8000aa4:	d00a      	beq.n	8000abc <__swsetup_r+0xbc>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60a3      	str	r3, [r4, #8]
 8000aaa:	6963      	ldr	r3, [r4, #20]
 8000aac:	425b      	negs	r3, r3
 8000aae:	61a3      	str	r3, [r4, #24]
 8000ab0:	6923      	ldr	r3, [r4, #16]
 8000ab2:	b943      	cbnz	r3, 8000ac6 <__swsetup_r+0xc6>
 8000ab4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ab8:	d1ba      	bne.n	8000a30 <__swsetup_r+0x30>
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	0781      	lsls	r1, r0, #30
 8000abe:	bf58      	it	pl
 8000ac0:	6963      	ldrpl	r3, [r4, #20]
 8000ac2:	60a3      	str	r3, [r4, #8]
 8000ac4:	e7f4      	b.n	8000ab0 <__swsetup_r+0xb0>
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	e7f7      	b.n	8000aba <__swsetup_r+0xba>
 8000aca:	bf00      	nop
 8000acc:	20000010 	.word	0x20000010
 8000ad0:	080012ec 	.word	0x080012ec
 8000ad4:	0800130c 	.word	0x0800130c
 8000ad8:	080012cc 	.word	0x080012cc

08000adc <__sflush_r>:
 8000adc:	898a      	ldrh	r2, [r1, #12]
 8000ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	0710      	lsls	r0, r2, #28
 8000ae6:	460c      	mov	r4, r1
 8000ae8:	d458      	bmi.n	8000b9c <__sflush_r+0xc0>
 8000aea:	684b      	ldr	r3, [r1, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dc05      	bgt.n	8000afc <__sflush_r+0x20>
 8000af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	dc02      	bgt.n	8000afc <__sflush_r+0x20>
 8000af6:	2000      	movs	r0, #0
 8000af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0f9      	beq.n	8000af6 <__sflush_r+0x1a>
 8000b02:	2300      	movs	r3, #0
 8000b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b08:	682f      	ldr	r7, [r5, #0]
 8000b0a:	602b      	str	r3, [r5, #0]
 8000b0c:	d032      	beq.n	8000b74 <__sflush_r+0x98>
 8000b0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b10:	89a3      	ldrh	r3, [r4, #12]
 8000b12:	075a      	lsls	r2, r3, #29
 8000b14:	d505      	bpl.n	8000b22 <__sflush_r+0x46>
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	1ac0      	subs	r0, r0, r3
 8000b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b1c:	b10b      	cbz	r3, 8000b22 <__sflush_r+0x46>
 8000b1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b20:	1ac0      	subs	r0, r0, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	4602      	mov	r2, r0
 8000b26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b28:	6a21      	ldr	r1, [r4, #32]
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	47b0      	blx	r6
 8000b2e:	1c43      	adds	r3, r0, #1
 8000b30:	89a3      	ldrh	r3, [r4, #12]
 8000b32:	d106      	bne.n	8000b42 <__sflush_r+0x66>
 8000b34:	6829      	ldr	r1, [r5, #0]
 8000b36:	291d      	cmp	r1, #29
 8000b38:	d82c      	bhi.n	8000b94 <__sflush_r+0xb8>
 8000b3a:	4a2a      	ldr	r2, [pc, #168]	; (8000be4 <__sflush_r+0x108>)
 8000b3c:	40ca      	lsrs	r2, r1
 8000b3e:	07d6      	lsls	r6, r2, #31
 8000b40:	d528      	bpl.n	8000b94 <__sflush_r+0xb8>
 8000b42:	2200      	movs	r2, #0
 8000b44:	6062      	str	r2, [r4, #4]
 8000b46:	04d9      	lsls	r1, r3, #19
 8000b48:	6922      	ldr	r2, [r4, #16]
 8000b4a:	6022      	str	r2, [r4, #0]
 8000b4c:	d504      	bpl.n	8000b58 <__sflush_r+0x7c>
 8000b4e:	1c42      	adds	r2, r0, #1
 8000b50:	d101      	bne.n	8000b56 <__sflush_r+0x7a>
 8000b52:	682b      	ldr	r3, [r5, #0]
 8000b54:	b903      	cbnz	r3, 8000b58 <__sflush_r+0x7c>
 8000b56:	6560      	str	r0, [r4, #84]	; 0x54
 8000b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b5a:	602f      	str	r7, [r5, #0]
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d0ca      	beq.n	8000af6 <__sflush_r+0x1a>
 8000b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d002      	beq.n	8000b6e <__sflush_r+0x92>
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f000 f9d7 	bl	8000f1c <_free_r>
 8000b6e:	2000      	movs	r0, #0
 8000b70:	6360      	str	r0, [r4, #52]	; 0x34
 8000b72:	e7c1      	b.n	8000af8 <__sflush_r+0x1c>
 8000b74:	6a21      	ldr	r1, [r4, #32]
 8000b76:	2301      	movs	r3, #1
 8000b78:	4628      	mov	r0, r5
 8000b7a:	47b0      	blx	r6
 8000b7c:	1c41      	adds	r1, r0, #1
 8000b7e:	d1c7      	bne.n	8000b10 <__sflush_r+0x34>
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0c4      	beq.n	8000b10 <__sflush_r+0x34>
 8000b86:	2b1d      	cmp	r3, #29
 8000b88:	d001      	beq.n	8000b8e <__sflush_r+0xb2>
 8000b8a:	2b16      	cmp	r3, #22
 8000b8c:	d101      	bne.n	8000b92 <__sflush_r+0xb6>
 8000b8e:	602f      	str	r7, [r5, #0]
 8000b90:	e7b1      	b.n	8000af6 <__sflush_r+0x1a>
 8000b92:	89a3      	ldrh	r3, [r4, #12]
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	81a3      	strh	r3, [r4, #12]
 8000b9a:	e7ad      	b.n	8000af8 <__sflush_r+0x1c>
 8000b9c:	690f      	ldr	r7, [r1, #16]
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d0a9      	beq.n	8000af6 <__sflush_r+0x1a>
 8000ba2:	0793      	lsls	r3, r2, #30
 8000ba4:	680e      	ldr	r6, [r1, #0]
 8000ba6:	bf08      	it	eq
 8000ba8:	694b      	ldreq	r3, [r1, #20]
 8000baa:	600f      	str	r7, [r1, #0]
 8000bac:	bf18      	it	ne
 8000bae:	2300      	movne	r3, #0
 8000bb0:	eba6 0807 	sub.w	r8, r6, r7
 8000bb4:	608b      	str	r3, [r1, #8]
 8000bb6:	f1b8 0f00 	cmp.w	r8, #0
 8000bba:	dd9c      	ble.n	8000af6 <__sflush_r+0x1a>
 8000bbc:	6a21      	ldr	r1, [r4, #32]
 8000bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	463a      	mov	r2, r7
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	47b0      	blx	r6
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	dc06      	bgt.n	8000bda <__sflush_r+0xfe>
 8000bcc:	89a3      	ldrh	r3, [r4, #12]
 8000bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd2:	81a3      	strh	r3, [r4, #12]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd8:	e78e      	b.n	8000af8 <__sflush_r+0x1c>
 8000bda:	4407      	add	r7, r0
 8000bdc:	eba8 0800 	sub.w	r8, r8, r0
 8000be0:	e7e9      	b.n	8000bb6 <__sflush_r+0xda>
 8000be2:	bf00      	nop
 8000be4:	20400001 	.word	0x20400001

08000be8 <_fflush_r>:
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	690b      	ldr	r3, [r1, #16]
 8000bec:	4605      	mov	r5, r0
 8000bee:	460c      	mov	r4, r1
 8000bf0:	b913      	cbnz	r3, 8000bf8 <_fflush_r+0x10>
 8000bf2:	2500      	movs	r5, #0
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	bd38      	pop	{r3, r4, r5, pc}
 8000bf8:	b118      	cbz	r0, 8000c02 <_fflush_r+0x1a>
 8000bfa:	6983      	ldr	r3, [r0, #24]
 8000bfc:	b90b      	cbnz	r3, 8000c02 <_fflush_r+0x1a>
 8000bfe:	f000 f887 	bl	8000d10 <__sinit>
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <_fflush_r+0x6c>)
 8000c04:	429c      	cmp	r4, r3
 8000c06:	d11b      	bne.n	8000c40 <_fflush_r+0x58>
 8000c08:	686c      	ldr	r4, [r5, #4]
 8000c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0ef      	beq.n	8000bf2 <_fflush_r+0xa>
 8000c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c14:	07d0      	lsls	r0, r2, #31
 8000c16:	d404      	bmi.n	8000c22 <_fflush_r+0x3a>
 8000c18:	0599      	lsls	r1, r3, #22
 8000c1a:	d402      	bmi.n	8000c22 <_fflush_r+0x3a>
 8000c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c1e:	f000 f915 	bl	8000e4c <__retarget_lock_acquire_recursive>
 8000c22:	4628      	mov	r0, r5
 8000c24:	4621      	mov	r1, r4
 8000c26:	f7ff ff59 	bl	8000adc <__sflush_r>
 8000c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c2c:	07da      	lsls	r2, r3, #31
 8000c2e:	4605      	mov	r5, r0
 8000c30:	d4e0      	bmi.n	8000bf4 <_fflush_r+0xc>
 8000c32:	89a3      	ldrh	r3, [r4, #12]
 8000c34:	059b      	lsls	r3, r3, #22
 8000c36:	d4dd      	bmi.n	8000bf4 <_fflush_r+0xc>
 8000c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c3a:	f000 f908 	bl	8000e4e <__retarget_lock_release_recursive>
 8000c3e:	e7d9      	b.n	8000bf4 <_fflush_r+0xc>
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <_fflush_r+0x70>)
 8000c42:	429c      	cmp	r4, r3
 8000c44:	d101      	bne.n	8000c4a <_fflush_r+0x62>
 8000c46:	68ac      	ldr	r4, [r5, #8]
 8000c48:	e7df      	b.n	8000c0a <_fflush_r+0x22>
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <_fflush_r+0x74>)
 8000c4c:	429c      	cmp	r4, r3
 8000c4e:	bf08      	it	eq
 8000c50:	68ec      	ldreq	r4, [r5, #12]
 8000c52:	e7da      	b.n	8000c0a <_fflush_r+0x22>
 8000c54:	080012ec 	.word	0x080012ec
 8000c58:	0800130c 	.word	0x0800130c
 8000c5c:	080012cc 	.word	0x080012cc

08000c60 <std>:
 8000c60:	2300      	movs	r3, #0
 8000c62:	b510      	push	{r4, lr}
 8000c64:	4604      	mov	r4, r0
 8000c66:	e9c0 3300 	strd	r3, r3, [r0]
 8000c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c6e:	6083      	str	r3, [r0, #8]
 8000c70:	8181      	strh	r1, [r0, #12]
 8000c72:	6643      	str	r3, [r0, #100]	; 0x64
 8000c74:	81c2      	strh	r2, [r0, #14]
 8000c76:	6183      	str	r3, [r0, #24]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	305c      	adds	r0, #92	; 0x5c
 8000c7e:	f7ff fdef 	bl	8000860 <memset>
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <std+0x38>)
 8000c84:	6263      	str	r3, [r4, #36]	; 0x24
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <std+0x3c>)
 8000c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <std+0x40>)
 8000c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <std+0x44>)
 8000c90:	6224      	str	r4, [r4, #32]
 8000c92:	6323      	str	r3, [r4, #48]	; 0x30
 8000c94:	bd10      	pop	{r4, pc}
 8000c96:	bf00      	nop
 8000c98:	080010fd 	.word	0x080010fd
 8000c9c:	0800111f 	.word	0x0800111f
 8000ca0:	08001157 	.word	0x08001157
 8000ca4:	0800117b 	.word	0x0800117b

08000ca8 <_cleanup_r>:
 8000ca8:	4901      	ldr	r1, [pc, #4]	; (8000cb0 <_cleanup_r+0x8>)
 8000caa:	f000 b8af 	b.w	8000e0c <_fwalk_reent>
 8000cae:	bf00      	nop
 8000cb0:	08000be9 	.word	0x08000be9

08000cb4 <__sfmoreglue>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	2268      	movs	r2, #104	; 0x68
 8000cb8:	1e4d      	subs	r5, r1, #1
 8000cba:	4355      	muls	r5, r2
 8000cbc:	460e      	mov	r6, r1
 8000cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cc2:	f000 f997 	bl	8000ff4 <_malloc_r>
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	b140      	cbz	r0, 8000cdc <__sfmoreglue+0x28>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8000cd0:	300c      	adds	r0, #12
 8000cd2:	60a0      	str	r0, [r4, #8]
 8000cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cd8:	f7ff fdc2 	bl	8000860 <memset>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	bd70      	pop	{r4, r5, r6, pc}

08000ce0 <__sfp_lock_acquire>:
 8000ce0:	4801      	ldr	r0, [pc, #4]	; (8000ce8 <__sfp_lock_acquire+0x8>)
 8000ce2:	f000 b8b3 	b.w	8000e4c <__retarget_lock_acquire_recursive>
 8000ce6:	bf00      	nop
 8000ce8:	200000a9 	.word	0x200000a9

08000cec <__sfp_lock_release>:
 8000cec:	4801      	ldr	r0, [pc, #4]	; (8000cf4 <__sfp_lock_release+0x8>)
 8000cee:	f000 b8ae 	b.w	8000e4e <__retarget_lock_release_recursive>
 8000cf2:	bf00      	nop
 8000cf4:	200000a9 	.word	0x200000a9

08000cf8 <__sinit_lock_acquire>:
 8000cf8:	4801      	ldr	r0, [pc, #4]	; (8000d00 <__sinit_lock_acquire+0x8>)
 8000cfa:	f000 b8a7 	b.w	8000e4c <__retarget_lock_acquire_recursive>
 8000cfe:	bf00      	nop
 8000d00:	200000aa 	.word	0x200000aa

08000d04 <__sinit_lock_release>:
 8000d04:	4801      	ldr	r0, [pc, #4]	; (8000d0c <__sinit_lock_release+0x8>)
 8000d06:	f000 b8a2 	b.w	8000e4e <__retarget_lock_release_recursive>
 8000d0a:	bf00      	nop
 8000d0c:	200000aa 	.word	0x200000aa

08000d10 <__sinit>:
 8000d10:	b510      	push	{r4, lr}
 8000d12:	4604      	mov	r4, r0
 8000d14:	f7ff fff0 	bl	8000cf8 <__sinit_lock_acquire>
 8000d18:	69a3      	ldr	r3, [r4, #24]
 8000d1a:	b11b      	cbz	r3, 8000d24 <__sinit+0x14>
 8000d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d20:	f7ff bff0 	b.w	8000d04 <__sinit_lock_release>
 8000d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d28:	6523      	str	r3, [r4, #80]	; 0x50
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <__sinit+0x68>)
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <__sinit+0x6c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	bf04      	itt	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	61a3      	streq	r3, [r4, #24]
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 f820 	bl	8000d80 <__sfp>
 8000d40:	6060      	str	r0, [r4, #4]
 8000d42:	4620      	mov	r0, r4
 8000d44:	f000 f81c 	bl	8000d80 <__sfp>
 8000d48:	60a0      	str	r0, [r4, #8]
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f000 f818 	bl	8000d80 <__sfp>
 8000d50:	2200      	movs	r2, #0
 8000d52:	60e0      	str	r0, [r4, #12]
 8000d54:	2104      	movs	r1, #4
 8000d56:	6860      	ldr	r0, [r4, #4]
 8000d58:	f7ff ff82 	bl	8000c60 <std>
 8000d5c:	68a0      	ldr	r0, [r4, #8]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2109      	movs	r1, #9
 8000d62:	f7ff ff7d 	bl	8000c60 <std>
 8000d66:	68e0      	ldr	r0, [r4, #12]
 8000d68:	2202      	movs	r2, #2
 8000d6a:	2112      	movs	r1, #18
 8000d6c:	f7ff ff78 	bl	8000c60 <std>
 8000d70:	2301      	movs	r3, #1
 8000d72:	61a3      	str	r3, [r4, #24]
 8000d74:	e7d2      	b.n	8000d1c <__sinit+0xc>
 8000d76:	bf00      	nop
 8000d78:	080012c8 	.word	0x080012c8
 8000d7c:	08000ca9 	.word	0x08000ca9

08000d80 <__sfp>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	4607      	mov	r7, r0
 8000d84:	f7ff ffac 	bl	8000ce0 <__sfp_lock_acquire>
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <__sfp+0x84>)
 8000d8a:	681e      	ldr	r6, [r3, #0]
 8000d8c:	69b3      	ldr	r3, [r6, #24]
 8000d8e:	b913      	cbnz	r3, 8000d96 <__sfp+0x16>
 8000d90:	4630      	mov	r0, r6
 8000d92:	f7ff ffbd 	bl	8000d10 <__sinit>
 8000d96:	3648      	adds	r6, #72	; 0x48
 8000d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	d503      	bpl.n	8000da8 <__sfp+0x28>
 8000da0:	6833      	ldr	r3, [r6, #0]
 8000da2:	b30b      	cbz	r3, 8000de8 <__sfp+0x68>
 8000da4:	6836      	ldr	r6, [r6, #0]
 8000da6:	e7f7      	b.n	8000d98 <__sfp+0x18>
 8000da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000dac:	b9d5      	cbnz	r5, 8000de4 <__sfp+0x64>
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <__sfp+0x88>)
 8000db0:	60e3      	str	r3, [r4, #12]
 8000db2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000db6:	6665      	str	r5, [r4, #100]	; 0x64
 8000db8:	f000 f847 	bl	8000e4a <__retarget_lock_init_recursive>
 8000dbc:	f7ff ff96 	bl	8000cec <__sfp_lock_release>
 8000dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000dc8:	6025      	str	r5, [r4, #0]
 8000dca:	61a5      	str	r5, [r4, #24]
 8000dcc:	2208      	movs	r2, #8
 8000dce:	4629      	mov	r1, r5
 8000dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000dd4:	f7ff fd44 	bl	8000860 <memset>
 8000dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000de0:	4620      	mov	r0, r4
 8000de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000de4:	3468      	adds	r4, #104	; 0x68
 8000de6:	e7d9      	b.n	8000d9c <__sfp+0x1c>
 8000de8:	2104      	movs	r1, #4
 8000dea:	4638      	mov	r0, r7
 8000dec:	f7ff ff62 	bl	8000cb4 <__sfmoreglue>
 8000df0:	4604      	mov	r4, r0
 8000df2:	6030      	str	r0, [r6, #0]
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d1d5      	bne.n	8000da4 <__sfp+0x24>
 8000df8:	f7ff ff78 	bl	8000cec <__sfp_lock_release>
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	e7ee      	b.n	8000de0 <__sfp+0x60>
 8000e02:	bf00      	nop
 8000e04:	080012c8 	.word	0x080012c8
 8000e08:	ffff0001 	.word	0xffff0001

08000e0c <_fwalk_reent>:
 8000e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e10:	4606      	mov	r6, r0
 8000e12:	4688      	mov	r8, r1
 8000e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8000e22:	d505      	bpl.n	8000e30 <_fwalk_reent+0x24>
 8000e24:	6824      	ldr	r4, [r4, #0]
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d1f7      	bne.n	8000e1a <_fwalk_reent+0xe>
 8000e2a:	4638      	mov	r0, r7
 8000e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e30:	89ab      	ldrh	r3, [r5, #12]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d907      	bls.n	8000e46 <_fwalk_reent+0x3a>
 8000e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	d003      	beq.n	8000e46 <_fwalk_reent+0x3a>
 8000e3e:	4629      	mov	r1, r5
 8000e40:	4630      	mov	r0, r6
 8000e42:	47c0      	blx	r8
 8000e44:	4307      	orrs	r7, r0
 8000e46:	3568      	adds	r5, #104	; 0x68
 8000e48:	e7e9      	b.n	8000e1e <_fwalk_reent+0x12>

08000e4a <__retarget_lock_init_recursive>:
 8000e4a:	4770      	bx	lr

08000e4c <__retarget_lock_acquire_recursive>:
 8000e4c:	4770      	bx	lr

08000e4e <__retarget_lock_release_recursive>:
 8000e4e:	4770      	bx	lr

08000e50 <__swhatbuf_r>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	460e      	mov	r6, r1
 8000e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	b096      	sub	sp, #88	; 0x58
 8000e5c:	4614      	mov	r4, r2
 8000e5e:	461d      	mov	r5, r3
 8000e60:	da08      	bge.n	8000e74 <__swhatbuf_r+0x24>
 8000e62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	602a      	str	r2, [r5, #0]
 8000e6a:	061a      	lsls	r2, r3, #24
 8000e6c:	d410      	bmi.n	8000e90 <__swhatbuf_r+0x40>
 8000e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e72:	e00e      	b.n	8000e92 <__swhatbuf_r+0x42>
 8000e74:	466a      	mov	r2, sp
 8000e76:	f000 f9a7 	bl	80011c8 <_fstat_r>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	dbf1      	blt.n	8000e62 <__swhatbuf_r+0x12>
 8000e7e:	9a01      	ldr	r2, [sp, #4]
 8000e80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e88:	425a      	negs	r2, r3
 8000e8a:	415a      	adcs	r2, r3
 8000e8c:	602a      	str	r2, [r5, #0]
 8000e8e:	e7ee      	b.n	8000e6e <__swhatbuf_r+0x1e>
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	2000      	movs	r0, #0
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	b016      	add	sp, #88	; 0x58
 8000e98:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e9c <__smakebuf_r>:
 8000e9c:	898b      	ldrh	r3, [r1, #12]
 8000e9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ea0:	079d      	lsls	r5, r3, #30
 8000ea2:	4606      	mov	r6, r0
 8000ea4:	460c      	mov	r4, r1
 8000ea6:	d507      	bpl.n	8000eb8 <__smakebuf_r+0x1c>
 8000ea8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	6123      	str	r3, [r4, #16]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	6163      	str	r3, [r4, #20]
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	ab01      	add	r3, sp, #4
 8000eba:	466a      	mov	r2, sp
 8000ebc:	f7ff ffc8 	bl	8000e50 <__swhatbuf_r>
 8000ec0:	9900      	ldr	r1, [sp, #0]
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	f000 f895 	bl	8000ff4 <_malloc_r>
 8000eca:	b948      	cbnz	r0, 8000ee0 <__smakebuf_r+0x44>
 8000ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ed0:	059a      	lsls	r2, r3, #22
 8000ed2:	d4ef      	bmi.n	8000eb4 <__smakebuf_r+0x18>
 8000ed4:	f023 0303 	bic.w	r3, r3, #3
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	81a3      	strh	r3, [r4, #12]
 8000ede:	e7e3      	b.n	8000ea8 <__smakebuf_r+0xc>
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <__smakebuf_r+0x7c>)
 8000ee2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ee4:	89a3      	ldrh	r3, [r4, #12]
 8000ee6:	6020      	str	r0, [r4, #0]
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eec:	81a3      	strh	r3, [r4, #12]
 8000eee:	9b00      	ldr	r3, [sp, #0]
 8000ef0:	6163      	str	r3, [r4, #20]
 8000ef2:	9b01      	ldr	r3, [sp, #4]
 8000ef4:	6120      	str	r0, [r4, #16]
 8000ef6:	b15b      	cbz	r3, 8000f10 <__smakebuf_r+0x74>
 8000ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000efc:	4630      	mov	r0, r6
 8000efe:	f000 f975 	bl	80011ec <_isatty_r>
 8000f02:	b128      	cbz	r0, 8000f10 <__smakebuf_r+0x74>
 8000f04:	89a3      	ldrh	r3, [r4, #12]
 8000f06:	f023 0303 	bic.w	r3, r3, #3
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	81a3      	strh	r3, [r4, #12]
 8000f10:	89a0      	ldrh	r0, [r4, #12]
 8000f12:	4305      	orrs	r5, r0
 8000f14:	81a5      	strh	r5, [r4, #12]
 8000f16:	e7cd      	b.n	8000eb4 <__smakebuf_r+0x18>
 8000f18:	08000ca9 	.word	0x08000ca9

08000f1c <_free_r>:
 8000f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f1e:	2900      	cmp	r1, #0
 8000f20:	d044      	beq.n	8000fac <_free_r+0x90>
 8000f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f26:	9001      	str	r0, [sp, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8000f2e:	bfb8      	it	lt
 8000f30:	18e4      	addlt	r4, r4, r3
 8000f32:	f000 f97d 	bl	8001230 <__malloc_lock>
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <_free_r+0x94>)
 8000f38:	9801      	ldr	r0, [sp, #4]
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	b933      	cbnz	r3, 8000f4c <_free_r+0x30>
 8000f3e:	6063      	str	r3, [r4, #4]
 8000f40:	6014      	str	r4, [r2, #0]
 8000f42:	b003      	add	sp, #12
 8000f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f48:	f000 b978 	b.w	800123c <__malloc_unlock>
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <_free_r+0x46>
 8000f50:	6825      	ldr	r5, [r4, #0]
 8000f52:	1961      	adds	r1, r4, r5
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf01      	itttt	eq
 8000f58:	6819      	ldreq	r1, [r3, #0]
 8000f5a:	685b      	ldreq	r3, [r3, #4]
 8000f5c:	1949      	addeq	r1, r1, r5
 8000f5e:	6021      	streq	r1, [r4, #0]
 8000f60:	e7ed      	b.n	8000f3e <_free_r+0x22>
 8000f62:	461a      	mov	r2, r3
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	b10b      	cbz	r3, 8000f6c <_free_r+0x50>
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d9fa      	bls.n	8000f62 <_free_r+0x46>
 8000f6c:	6811      	ldr	r1, [r2, #0]
 8000f6e:	1855      	adds	r5, r2, r1
 8000f70:	42a5      	cmp	r5, r4
 8000f72:	d10b      	bne.n	8000f8c <_free_r+0x70>
 8000f74:	6824      	ldr	r4, [r4, #0]
 8000f76:	4421      	add	r1, r4
 8000f78:	1854      	adds	r4, r2, r1
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	6011      	str	r1, [r2, #0]
 8000f7e:	d1e0      	bne.n	8000f42 <_free_r+0x26>
 8000f80:	681c      	ldr	r4, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	6053      	str	r3, [r2, #4]
 8000f86:	4421      	add	r1, r4
 8000f88:	6011      	str	r1, [r2, #0]
 8000f8a:	e7da      	b.n	8000f42 <_free_r+0x26>
 8000f8c:	d902      	bls.n	8000f94 <_free_r+0x78>
 8000f8e:	230c      	movs	r3, #12
 8000f90:	6003      	str	r3, [r0, #0]
 8000f92:	e7d6      	b.n	8000f42 <_free_r+0x26>
 8000f94:	6825      	ldr	r5, [r4, #0]
 8000f96:	1961      	adds	r1, r4, r5
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	bf04      	itt	eq
 8000f9c:	6819      	ldreq	r1, [r3, #0]
 8000f9e:	685b      	ldreq	r3, [r3, #4]
 8000fa0:	6063      	str	r3, [r4, #4]
 8000fa2:	bf04      	itt	eq
 8000fa4:	1949      	addeq	r1, r1, r5
 8000fa6:	6021      	streq	r1, [r4, #0]
 8000fa8:	6054      	str	r4, [r2, #4]
 8000faa:	e7ca      	b.n	8000f42 <_free_r+0x26>
 8000fac:	b003      	add	sp, #12
 8000fae:	bd30      	pop	{r4, r5, pc}
 8000fb0:	200000ac 	.word	0x200000ac

08000fb4 <sbrk_aligned>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	4e0e      	ldr	r6, [pc, #56]	; (8000ff0 <sbrk_aligned+0x3c>)
 8000fb8:	460c      	mov	r4, r1
 8000fba:	6831      	ldr	r1, [r6, #0]
 8000fbc:	4605      	mov	r5, r0
 8000fbe:	b911      	cbnz	r1, 8000fc6 <sbrk_aligned+0x12>
 8000fc0:	f000 f88c 	bl	80010dc <_sbrk_r>
 8000fc4:	6030      	str	r0, [r6, #0]
 8000fc6:	4621      	mov	r1, r4
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f000 f887 	bl	80010dc <_sbrk_r>
 8000fce:	1c43      	adds	r3, r0, #1
 8000fd0:	d00a      	beq.n	8000fe8 <sbrk_aligned+0x34>
 8000fd2:	1cc4      	adds	r4, r0, #3
 8000fd4:	f024 0403 	bic.w	r4, r4, #3
 8000fd8:	42a0      	cmp	r0, r4
 8000fda:	d007      	beq.n	8000fec <sbrk_aligned+0x38>
 8000fdc:	1a21      	subs	r1, r4, r0
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f000 f87c 	bl	80010dc <_sbrk_r>
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d101      	bne.n	8000fec <sbrk_aligned+0x38>
 8000fe8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000fec:	4620      	mov	r0, r4
 8000fee:	bd70      	pop	{r4, r5, r6, pc}
 8000ff0:	200000b0 	.word	0x200000b0

08000ff4 <_malloc_r>:
 8000ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff8:	1ccd      	adds	r5, r1, #3
 8000ffa:	f025 0503 	bic.w	r5, r5, #3
 8000ffe:	3508      	adds	r5, #8
 8001000:	2d0c      	cmp	r5, #12
 8001002:	bf38      	it	cc
 8001004:	250c      	movcc	r5, #12
 8001006:	2d00      	cmp	r5, #0
 8001008:	4607      	mov	r7, r0
 800100a:	db01      	blt.n	8001010 <_malloc_r+0x1c>
 800100c:	42a9      	cmp	r1, r5
 800100e:	d905      	bls.n	800101c <_malloc_r+0x28>
 8001010:	230c      	movs	r3, #12
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	2600      	movs	r6, #0
 8001016:	4630      	mov	r0, r6
 8001018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800101c:	4e2e      	ldr	r6, [pc, #184]	; (80010d8 <_malloc_r+0xe4>)
 800101e:	f000 f907 	bl	8001230 <__malloc_lock>
 8001022:	6833      	ldr	r3, [r6, #0]
 8001024:	461c      	mov	r4, r3
 8001026:	bb34      	cbnz	r4, 8001076 <_malloc_r+0x82>
 8001028:	4629      	mov	r1, r5
 800102a:	4638      	mov	r0, r7
 800102c:	f7ff ffc2 	bl	8000fb4 <sbrk_aligned>
 8001030:	1c43      	adds	r3, r0, #1
 8001032:	4604      	mov	r4, r0
 8001034:	d14d      	bne.n	80010d2 <_malloc_r+0xde>
 8001036:	6834      	ldr	r4, [r6, #0]
 8001038:	4626      	mov	r6, r4
 800103a:	2e00      	cmp	r6, #0
 800103c:	d140      	bne.n	80010c0 <_malloc_r+0xcc>
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	4631      	mov	r1, r6
 8001042:	4638      	mov	r0, r7
 8001044:	eb04 0803 	add.w	r8, r4, r3
 8001048:	f000 f848 	bl	80010dc <_sbrk_r>
 800104c:	4580      	cmp	r8, r0
 800104e:	d13a      	bne.n	80010c6 <_malloc_r+0xd2>
 8001050:	6821      	ldr	r1, [r4, #0]
 8001052:	3503      	adds	r5, #3
 8001054:	1a6d      	subs	r5, r5, r1
 8001056:	f025 0503 	bic.w	r5, r5, #3
 800105a:	3508      	adds	r5, #8
 800105c:	2d0c      	cmp	r5, #12
 800105e:	bf38      	it	cc
 8001060:	250c      	movcc	r5, #12
 8001062:	4629      	mov	r1, r5
 8001064:	4638      	mov	r0, r7
 8001066:	f7ff ffa5 	bl	8000fb4 <sbrk_aligned>
 800106a:	3001      	adds	r0, #1
 800106c:	d02b      	beq.n	80010c6 <_malloc_r+0xd2>
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	442b      	add	r3, r5
 8001072:	6023      	str	r3, [r4, #0]
 8001074:	e00e      	b.n	8001094 <_malloc_r+0xa0>
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	1b52      	subs	r2, r2, r5
 800107a:	d41e      	bmi.n	80010ba <_malloc_r+0xc6>
 800107c:	2a0b      	cmp	r2, #11
 800107e:	d916      	bls.n	80010ae <_malloc_r+0xba>
 8001080:	1961      	adds	r1, r4, r5
 8001082:	42a3      	cmp	r3, r4
 8001084:	6025      	str	r5, [r4, #0]
 8001086:	bf18      	it	ne
 8001088:	6059      	strne	r1, [r3, #4]
 800108a:	6863      	ldr	r3, [r4, #4]
 800108c:	bf08      	it	eq
 800108e:	6031      	streq	r1, [r6, #0]
 8001090:	5162      	str	r2, [r4, r5]
 8001092:	604b      	str	r3, [r1, #4]
 8001094:	4638      	mov	r0, r7
 8001096:	f104 060b 	add.w	r6, r4, #11
 800109a:	f000 f8cf 	bl	800123c <__malloc_unlock>
 800109e:	f026 0607 	bic.w	r6, r6, #7
 80010a2:	1d23      	adds	r3, r4, #4
 80010a4:	1af2      	subs	r2, r6, r3
 80010a6:	d0b6      	beq.n	8001016 <_malloc_r+0x22>
 80010a8:	1b9b      	subs	r3, r3, r6
 80010aa:	50a3      	str	r3, [r4, r2]
 80010ac:	e7b3      	b.n	8001016 <_malloc_r+0x22>
 80010ae:	6862      	ldr	r2, [r4, #4]
 80010b0:	42a3      	cmp	r3, r4
 80010b2:	bf0c      	ite	eq
 80010b4:	6032      	streq	r2, [r6, #0]
 80010b6:	605a      	strne	r2, [r3, #4]
 80010b8:	e7ec      	b.n	8001094 <_malloc_r+0xa0>
 80010ba:	4623      	mov	r3, r4
 80010bc:	6864      	ldr	r4, [r4, #4]
 80010be:	e7b2      	b.n	8001026 <_malloc_r+0x32>
 80010c0:	4634      	mov	r4, r6
 80010c2:	6876      	ldr	r6, [r6, #4]
 80010c4:	e7b9      	b.n	800103a <_malloc_r+0x46>
 80010c6:	230c      	movs	r3, #12
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4638      	mov	r0, r7
 80010cc:	f000 f8b6 	bl	800123c <__malloc_unlock>
 80010d0:	e7a1      	b.n	8001016 <_malloc_r+0x22>
 80010d2:	6025      	str	r5, [r4, #0]
 80010d4:	e7de      	b.n	8001094 <_malloc_r+0xa0>
 80010d6:	bf00      	nop
 80010d8:	200000ac 	.word	0x200000ac

080010dc <_sbrk_r>:
 80010dc:	b538      	push	{r3, r4, r5, lr}
 80010de:	4d06      	ldr	r5, [pc, #24]	; (80010f8 <_sbrk_r+0x1c>)
 80010e0:	2300      	movs	r3, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	4608      	mov	r0, r1
 80010e6:	602b      	str	r3, [r5, #0]
 80010e8:	f7ff fb30 	bl	800074c <_sbrk>
 80010ec:	1c43      	adds	r3, r0, #1
 80010ee:	d102      	bne.n	80010f6 <_sbrk_r+0x1a>
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	b103      	cbz	r3, 80010f6 <_sbrk_r+0x1a>
 80010f4:	6023      	str	r3, [r4, #0]
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
 80010f8:	200000b4 	.word	0x200000b4

080010fc <__sread>:
 80010fc:	b510      	push	{r4, lr}
 80010fe:	460c      	mov	r4, r1
 8001100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001104:	f000 f8a0 	bl	8001248 <_read_r>
 8001108:	2800      	cmp	r0, #0
 800110a:	bfab      	itete	ge
 800110c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800110e:	89a3      	ldrhlt	r3, [r4, #12]
 8001110:	181b      	addge	r3, r3, r0
 8001112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001116:	bfac      	ite	ge
 8001118:	6563      	strge	r3, [r4, #84]	; 0x54
 800111a:	81a3      	strhlt	r3, [r4, #12]
 800111c:	bd10      	pop	{r4, pc}

0800111e <__swrite>:
 800111e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001122:	461f      	mov	r7, r3
 8001124:	898b      	ldrh	r3, [r1, #12]
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	4605      	mov	r5, r0
 800112a:	460c      	mov	r4, r1
 800112c:	4616      	mov	r6, r2
 800112e:	d505      	bpl.n	800113c <__swrite+0x1e>
 8001130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001134:	2302      	movs	r3, #2
 8001136:	2200      	movs	r2, #0
 8001138:	f000 f868 	bl	800120c <_lseek_r>
 800113c:	89a3      	ldrh	r3, [r4, #12]
 800113e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001146:	81a3      	strh	r3, [r4, #12]
 8001148:	4632      	mov	r2, r6
 800114a:	463b      	mov	r3, r7
 800114c:	4628      	mov	r0, r5
 800114e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001152:	f000 b817 	b.w	8001184 <_write_r>

08001156 <__sseek>:
 8001156:	b510      	push	{r4, lr}
 8001158:	460c      	mov	r4, r1
 800115a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800115e:	f000 f855 	bl	800120c <_lseek_r>
 8001162:	1c43      	adds	r3, r0, #1
 8001164:	89a3      	ldrh	r3, [r4, #12]
 8001166:	bf15      	itete	ne
 8001168:	6560      	strne	r0, [r4, #84]	; 0x54
 800116a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800116e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001172:	81a3      	strheq	r3, [r4, #12]
 8001174:	bf18      	it	ne
 8001176:	81a3      	strhne	r3, [r4, #12]
 8001178:	bd10      	pop	{r4, pc}

0800117a <__sclose>:
 800117a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117e:	f000 b813 	b.w	80011a8 <_close_r>
	...

08001184 <_write_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4d07      	ldr	r5, [pc, #28]	; (80011a4 <_write_r+0x20>)
 8001188:	4604      	mov	r4, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4611      	mov	r1, r2
 800118e:	2200      	movs	r2, #0
 8001190:	602a      	str	r2, [r5, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	f7ff fa89 	bl	80006aa <_write>
 8001198:	1c43      	adds	r3, r0, #1
 800119a:	d102      	bne.n	80011a2 <_write_r+0x1e>
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	b103      	cbz	r3, 80011a2 <_write_r+0x1e>
 80011a0:	6023      	str	r3, [r4, #0]
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	200000b4 	.word	0x200000b4

080011a8 <_close_r>:
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4d06      	ldr	r5, [pc, #24]	; (80011c4 <_close_r+0x1c>)
 80011ac:	2300      	movs	r3, #0
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	602b      	str	r3, [r5, #0]
 80011b4:	f7ff fa95 	bl	80006e2 <_close>
 80011b8:	1c43      	adds	r3, r0, #1
 80011ba:	d102      	bne.n	80011c2 <_close_r+0x1a>
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	b103      	cbz	r3, 80011c2 <_close_r+0x1a>
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	bd38      	pop	{r3, r4, r5, pc}
 80011c4:	200000b4 	.word	0x200000b4

080011c8 <_fstat_r>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4d07      	ldr	r5, [pc, #28]	; (80011e8 <_fstat_r+0x20>)
 80011cc:	2300      	movs	r3, #0
 80011ce:	4604      	mov	r4, r0
 80011d0:	4608      	mov	r0, r1
 80011d2:	4611      	mov	r1, r2
 80011d4:	602b      	str	r3, [r5, #0]
 80011d6:	f7ff fa90 	bl	80006fa <_fstat>
 80011da:	1c43      	adds	r3, r0, #1
 80011dc:	d102      	bne.n	80011e4 <_fstat_r+0x1c>
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	b103      	cbz	r3, 80011e4 <_fstat_r+0x1c>
 80011e2:	6023      	str	r3, [r4, #0]
 80011e4:	bd38      	pop	{r3, r4, r5, pc}
 80011e6:	bf00      	nop
 80011e8:	200000b4 	.word	0x200000b4

080011ec <_isatty_r>:
 80011ec:	b538      	push	{r3, r4, r5, lr}
 80011ee:	4d06      	ldr	r5, [pc, #24]	; (8001208 <_isatty_r+0x1c>)
 80011f0:	2300      	movs	r3, #0
 80011f2:	4604      	mov	r4, r0
 80011f4:	4608      	mov	r0, r1
 80011f6:	602b      	str	r3, [r5, #0]
 80011f8:	f7ff fa8f 	bl	800071a <_isatty>
 80011fc:	1c43      	adds	r3, r0, #1
 80011fe:	d102      	bne.n	8001206 <_isatty_r+0x1a>
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	b103      	cbz	r3, 8001206 <_isatty_r+0x1a>
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	bd38      	pop	{r3, r4, r5, pc}
 8001208:	200000b4 	.word	0x200000b4

0800120c <_lseek_r>:
 800120c:	b538      	push	{r3, r4, r5, lr}
 800120e:	4d07      	ldr	r5, [pc, #28]	; (800122c <_lseek_r+0x20>)
 8001210:	4604      	mov	r4, r0
 8001212:	4608      	mov	r0, r1
 8001214:	4611      	mov	r1, r2
 8001216:	2200      	movs	r2, #0
 8001218:	602a      	str	r2, [r5, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	f7ff fa88 	bl	8000730 <_lseek>
 8001220:	1c43      	adds	r3, r0, #1
 8001222:	d102      	bne.n	800122a <_lseek_r+0x1e>
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	b103      	cbz	r3, 800122a <_lseek_r+0x1e>
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	bd38      	pop	{r3, r4, r5, pc}
 800122c:	200000b4 	.word	0x200000b4

08001230 <__malloc_lock>:
 8001230:	4801      	ldr	r0, [pc, #4]	; (8001238 <__malloc_lock+0x8>)
 8001232:	f7ff be0b 	b.w	8000e4c <__retarget_lock_acquire_recursive>
 8001236:	bf00      	nop
 8001238:	200000a8 	.word	0x200000a8

0800123c <__malloc_unlock>:
 800123c:	4801      	ldr	r0, [pc, #4]	; (8001244 <__malloc_unlock+0x8>)
 800123e:	f7ff be06 	b.w	8000e4e <__retarget_lock_release_recursive>
 8001242:	bf00      	nop
 8001244:	200000a8 	.word	0x200000a8

08001248 <_read_r>:
 8001248:	b538      	push	{r3, r4, r5, lr}
 800124a:	4d07      	ldr	r5, [pc, #28]	; (8001268 <_read_r+0x20>)
 800124c:	4604      	mov	r4, r0
 800124e:	4608      	mov	r0, r1
 8001250:	4611      	mov	r1, r2
 8001252:	2200      	movs	r2, #0
 8001254:	602a      	str	r2, [r5, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	f7ff fa0a 	bl	8000670 <_read>
 800125c:	1c43      	adds	r3, r0, #1
 800125e:	d102      	bne.n	8001266 <_read_r+0x1e>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	b103      	cbz	r3, 8001266 <_read_r+0x1e>
 8001264:	6023      	str	r3, [r4, #0]
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	200000b4 	.word	0x200000b4

0800126c <_init>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	bf00      	nop
 8001270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001272:	bc08      	pop	{r3}
 8001274:	469e      	mov	lr, r3
 8001276:	4770      	bx	lr

08001278 <_fini>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr
